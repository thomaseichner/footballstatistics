# -*- coding: utf-8 -*-
"""
Module to load the data from the Fussballdaten.de webpage
"""
__author__ = 'thomas'
try:
    import urllib.request as urllib2
except:
    import urllib2
import logging
from bs4 import BeautifulSoup
from collections import namedtuple, defaultdict

ranking = namedtuple('ranking', ['position', 'team', 'points', 'points_per_game', 'victories', 'victories_per_game',
                                 'draws', 'draws_per_game', 'losses', 'losses_per_game', 'goals_scored',
                                 'goals_scored_per_game', 'goals_conceived', 'goals_conceived_per_game', 'games'])
results = namedtuple('results', ['home_team', 'away_team', 'game_outcome', 'goals_home', 'goals_away'])
matchday = namedtuple('matchday', ['home_team', 'away_team', 'matchdate'])

from helper_functions import translate_name, get_game_result, convert_string_to_datetime

logging.basicConfig(level=logging.DEBUG, format=u'%(asctime)s - %(levelname)s - %(message)s')
LOGGER = logging.getLogger(__name__)


class FussballdatenDe():
    """
    Class to parse Fussballdaten.de webpage
    """
    def __init__(self, league='bundesliga'):
        self.page = None
        self.round = None
        self.season = None
        self.league = league

    def load_webpage(self, round, season):
        """
        Load the table data from the webpage and store it as BeautifulSoup object
        :param round:
        :param season:
        :return: None
        """
        url = '''http://www.fussballdaten.de/{league}/{season}/{round}/'''.format(season=season+1, round=round,
                                                                                  league=self.league)
        data = urllib2.urlopen(url)
        data = data.read().decode('utf-8', 'ignore')
        LOGGER.info(u'Loaded page for round: {} season: {}'.format(round, season))
        self.page = BeautifulSoup(data)
        self.round = round
        self.season = season

    def get_table(self, round, season, table_identifier):
        """
        Return the table identified by table_identifier from the page defined by round and season
        :param round:
        :param season:
        :param table_identifier:
        :return: BeautifulSoup object
        """
        LOGGER.info(u'Searching for table {} for round: {}, season: {}'.format(table_identifier, round, season))
        if not self.page or not self.season == season or not self.round == round:
            self.load_webpage(round, season)
        all_tabs = self.page.findAll('table')
        LOGGER.debug(u'Found {} tables'.format(len(all_tabs)))
        for tab in all_tabs:
            try:
                LOGGER.debug(u'Summary is: {}'.format(tab['summary']))
                if tab['summary'] == table_identifier:
                    LOGGER.debug(u'Found table {}'.format(tab['summary']))
                    return tab
            except Exception:
                pass
        LOGGER.error(u'Could not find table summary {}'.format(table_identifier))
        raise LookupError

    def get_table_row_tuple(self, entries, type):
        assert type in ('RANKING', 'RESULTS', 'MATCHDAY')
        if type == 'RANKING':
            goals_scored, goals_conceived = [int(i) for i in entries['Torverhaeltnis'].split(':')]
            if float(entries['Spiele']) == 0.:
                points_per_game = None
                victories_per_game = None
                draws_per_game = None
                losses_per_game = None
                goals_scored_per_game = None
                goals_conceived_per_game = None
            else:
                points_per_game = float(entries['Punkte']) / float(entries['Spiele'])
                victories_per_game = float(entries['S']) / float(entries['Spiele'])
                draws_per_game = float(entries['U']) / float(entries['Spiele'])
                losses_per_game = float(entries['N']) / float(entries['Spiele'])
                goals_scored_per_game = goals_scored / float(entries['Spiele'])
                goals_conceived_per_game = goals_conceived / float(entries['Spiele'])
            return ranking(int(float(entries['Platz'])), translate_name(entries['Verein']), int(entries['Punkte']),
                           points_per_game, int(entries['S']), victories_per_game, int(entries['U']), draws_per_game,
                           int(entries['N']), losses_per_game, goals_scored, goals_scored_per_game, goals_conceived,
                           goals_conceived_per_game, int(entries['Spiele']))
        row = [translate_name(entries['Heim']), translate_name(entries['Gast'])]
        if type == 'RESULTS':
            row.extend(get_game_result(entries['Ergebnis'].split()[0]))
            return results._make(row)
        if type == 'MATCHDAY':
            row.append(convert_string_to_datetime(entries['Tag'], season=self.season))
            return matchday._make(row)

    def get_data_from_table(self, tab, type='RANKING'):
        """
        Extract the data of the given type from the given table, return the
        :param tab:
        :return: ist of namedtuples[(ranking / results)]
        """
        rows = self.find_all_table_rows(tab)
        table = []
        alt_position = 1
        for row in rows:
            if not row.findChildren('td'):
                LOGGER.warning(u'Row contains no column children, skipping it: {}'.format(row))
                continue
            entries = self.get_table_row_entries(row, alt_position)
            if type == 'RANKING':
                alt_position = float(entries['Platz'])
            try:
                row_entries = self.get_table_row_tuple(entries, type)
                table.append(row_entries)
            except (LookupError, TypeError):
                LOGGER.warning(u'Could not convert row {} to tablerow, skipping it'.format(row))
        return table

    @staticmethod
    def find_all_table_rows(table):
        return table.findChildren('tr')

    @staticmethod
    def get_table_row_entries(row, alt_position):
        """
        Extract the entries of a single table row, if position is empty (because it is the same as before),
        putn the alt_position instead
        :param row: BeautifulSoup tablerow object
        :param alt_position:
        :return: dict with table column class names as keys and texts as values
        """
        entries = defaultdict(basestring)
        cols = row.findChildren('td')
        for entry in cols:
            # spaceholders or other things might not have a class
            if 'class' in entry.attrs:
                LOGGER.debug(u'Adding entry {}: {}'.format(entry['class'][0], entry.text))
                entries[entry['class'][0]] = entry.text
        if 'Platz' in entries and not entries['Platz']:
            entries['Platz'] = str(alt_position)
        return entries

    def get_overall_position_table(self, round, season=2013):
        """
        Get the overall standings for the given round and season of the german bundesliga
        :param round:
        :param season:
        :return: list of namedtuples[(Position, team, points, average points per game)]
        """
        LOGGER.info(u'Extracting overall standings for round {}, season {}'.format(round, season))
        summary = 'Die Tabelle am {}. Spieltag der Bundesliga {}/{}'.format(round, season, season+1)
        if self.league == 'england':
            summary = 'Die Tabelle am {}. Spieltag der englischen Premier League {}/{}'.format(round, season, season+1)
        table = self.extract_table_for_summary(round, season, summary)
        return table

    def get_shape_table(self, round, season=2013):
        """
        Get the shape table for the given round and season of the german bundesliga, shape table
        is the ranking considering only the lat 6 rounds
        :param round:
        :param season:
        :return: list of namedtuples[(Position, team, points, average points per game)]
        """
        LOGGER.info(u'Extracting shape table for round {}, season {}'.format(round, season))
        summary = 'Formtabelle'
        table = self.extract_table_for_summary(round, season, summary)
        return table

    def get_overall_home_table(self, round, season=2013):
        """
        Get the overall home table for the given round and seasin of the german bundesliga
        :param round:
        :param season:
        :return: list of namedtuples[(Position, team, points, average points per game)]
        """
        LOGGER.info(u'Extracting overall home table for round {}, season {}'.format(round, season))
        summary = 'Tabelle zu Hause'
        table = self.extract_table_for_summary(round, season, summary)
        return table

    def get_overall_away_table(self, round, season=2013):
        """
        Get the overall away table for the given round and season of the german bundesliga
        :param round:
        :param season:
        :return: list of namedtuples[(Position, team, points, average points per game)]
        """
        LOGGER.info(u'Extracting overall away table for round {}, season {}'.format(round, season))
        summary = u'Tabelle Ausw√§rts'
        table = self.extract_table_for_summary(round, season, summary)
        return table

    def extract_table_for_summary(self, round, season, summary):
        """
        For a given round, season and summary, extract the corresponding table of the german bundesliga
        :param round:
        :param season:
        :param summary:
        :return: list of namedtuples[(Position, team, points, average points per game)]
        """
        tab = self.get_table(round, season, summary)
        table = self.get_data_from_table(tab)
        if self.league == 'england':
            assert len(table) == 20
        else:
            assert len(table) == 18
        LOGGER.info(u'Extracted data {} for round {}, season {}'.format(table, round, season))
        return table

    def get_matchday_overview_table(self, round, season):
        """
        Extract the matchday overviw table for the given round and season
        :param round:
        :param season:
        :return: BeautifulSoup object
        """
        try:
            summary = 'Die Spiele am {}. Spieltag der Bundesliga {}/{}'.format(round, season, season + 1)
            if self.league == 'england':
                summary = 'Die Spiele am {}. Spieltag der englischen Premier League {}/{}'.format(round, season, season + 1)
            tab = self.get_table(round, season, summary)
        except LookupError:
            summary = 'Der {}. Spieltag der Bundesliga {}/{}'.format(round, season, season + 1)
            if self.league == 'england':
                summary = 'Der {}. Spieltag der englischen Premier League {}/{}'.format(round, season, season + 1)

            tab = self.get_table(round, season, summary)
        return tab

    def get_results_table(self, round, season=2013):
        """
        Get the results table for the given round and season of the german bundesliga
        :param round:
        :param season:
        :return: list of namedtuples [(home team, away team,  game outcome (1, 0, 2), goals home, goals away)]
        """
        LOGGER.info(u'Extracting results table for round {}, season {}'.format(round, season))
        tab = self.get_matchday_overview_table(round, season)
        table = self.get_data_from_table(tab, type='RESULTS')
        if self.league == 'england':
            assert len(table) == 10
        else:
            assert len(table) == 9
        LOGGER.info(u'Extracted results from round {}, season {}'.format(round, season))
        return table

    def get_matchday_table(self, round, season=2014):
        """
        Get the matchday table for the given round and season, returns also the date the game takes place
        :param round:
        :param season:
        :return: list of namedtuples [(home_team, away_team, matchdate)]
        """
        LOGGER.info(u'Extracting matchday {}, season {}'.format(round, season))
        tab = self.get_matchday_overview_table(round, season)
        table = self.get_data_from_table(tab, type='MATCHDAY')
        if self.league == 'england':
            assert len(table) == 10
        else:
            assert len(table) == 9
        LOGGER.info(u'Extracted matchday {}, season {}'.format(round, season))
        return table
